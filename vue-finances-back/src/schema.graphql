#Funciona como interface para o Graphql-yoga. Ou seja, o que o Graphql-yoga precisa expor para as aplicações client.

scalar Date

type Query { # RootType = Query, Mutation e Subscribe
  #RootFields = Campos de nível raíz  
  accounts: [ Account! ]!
  categories(operation: Operation): [ Category!] !
  user: User
}

type Mutation {
  createAccount(description: String): Account!
  createCategory(description: String!, operation: Operation!): Category!
  createRecord(
    accountId: ID!  
    categoryId: ID!
    amount: Float!
    type: Operation!
    date: Date! 
    description: String!
    tags: String
    note: String
  ): Record!
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, password: String!, name: String!): AuthPayload
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  email: String!
}

type Account {
  id: ID! 
  user: User
  description: String!
}

enum Operation {
  DEBIT
  CREDIT
}

type Category {
  id: ID! 
  user: User
  description: String!
  operation: Operation!
}

type Record {
  id: ID! 
  user: User!
  account: Account!  
  category: Category!
  amount: Float!
  type: Operation!
  date: Date! 
  description: String!
  tags: String
  note: String
}